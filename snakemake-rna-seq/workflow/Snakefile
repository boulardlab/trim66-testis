configfile: "config.yaml"

from pathlib import Path
from pprint import pprint as pp
from datetime import datetime
# import json
import re
import pandas as pd

from utilities.general import get_filename
from utilities.rnaseq import get_samples

#######################
## DEFINE VARIABLES
#######################
date = datetime.now()
timestamp = date.strftime("%Y-%m-%d")

log_folder = Path(config["globals"]["log_folder"])
log_folder = log_folder.joinpath(timestamp)

data_folder       = Path(config["globals"]["data_folder"])
container_folder  = Path(config["globals"]["container_folder"])
qc_folder         = Path(config["globals"]["qc_folder"])
reads_folder      = Path(config["globals"]["reads_folder"])
references_folder = Path(config["globals"]["references_folder"])
tmp_folder        = Path(config["globals"]["tmp_folder"])
analysis_folder   = Path(config["globals"]["analysis_folder"])

raw_reads_folder  = reads_folder.joinpath("raw")
trim_reads_folder = reads_folder.joinpath("trim")
rdata_folder      = analysis_folder.joinpath("rdata")
pictures_folder   = analysis_folder.joinpath("pictures")
tables_folder     = analysis_folder.joinpath("tables")
notebooks_folder  = analysis_folder.joinpath("notebooks")

fastqc_raw_folder     = qc_folder.joinpath("fastqc-raw")
fastqc_trim_folder    = qc_folder.joinpath("fastqc-trimmed")
fastqc_markdup_folder = qc_folder.joinpath("fastqc-markdup")
fastqc_star_folder    = qc_folder.joinpath("star")

multiqc_folder         = qc_folder.joinpath("multiqc")
multiqc_raw_folder     = multiqc_folder.joinpath("raw")
multiqc_trim_folder    = multiqc_folder.joinpath("trim")
multiqc_star_folder    = multiqc_folder.joinpath("star")
multiqc_markdup_folder = multiqc_folder.joinpath("markdup")

alignments_folder = data_folder.joinpath("alignments")
star_folder       = alignments_folder.joinpath("star")
markdup_folder    = alignments_folder.joinpath("star_markdup")
starTE_folder     = alignments_folder.joinpath("starTE")
salmonTE_folder   = data_folder.joinpath("salmonTE")

trna_coverage_folder = data_folder.joinpath("tRNA_coverage")

# featureCount_folder = starTE_folder.joinpath("featureCount")

deseq2_working_directory   = Path(config["deseq2"]["working_directory"])
deseq2_notebook_input_path = Path(config["deseq2"]["notebook_path"])


# disable_trim = config["trim"]["disable"]

## These folders will be create at the beginning of the pipeline
init_folders = [
    log_folder,
    reads_folder,
    raw_reads_folder,
    trim_reads_folder,
    multiqc_folder,
    alignments_folder,
    references_folder,
    tmp_folder,
    star_folder,
    starTE_folder,
    salmonTE_folder,
    # featureCount_folder,
    tables_folder,
    pictures_folder,
    notebooks_folder
]

## Generate paths for sequence data from links
fasta_path = references_folder.joinpath(get_filename(config["genome"]["fasta_link"], decompress=True))

if "gtf_link" in config["genome"].keys():
    gtf_path = references_folder.joinpath(get_filename(config["genome"]["gtf_link"], decompress=True))
    disable_gtf_download = False
elif "gtf_path" in config["genome"].keys():
    gtf_path = references_folder.joinpath(get_filename(config["genome"]["gtf_path"], decompress=True))
    disable_gtf_download = True
else:
    raise ValueError("Invalid config: specify either gtf_link or gtf_path")

if "rmsk_link" in config["genome"]:
    rmsk_path = references_folder.joinpath(get_filename(config["genome"]["rmsk_link"], decompress=False))
elif "rmsk_path" in config["genome"]:
    rmsk_path = Path(config["genome"]["rmsk_path"])
    config["genome"]["rmsk_link"] = None
else:
    raise ValueError("Invalid config: specify either rmsk_link or rmsk_path")
rmsk_bed = Path(str(rmsk_path).replace("gtf", "bed"))
gaf_path = references_folder.joinpath(get_filename(config["genome"]["gaf_link"], decompress=False))
tRNA_annotation_file = config["genome"]["gtrnadb_bed"]

## Get samples
libraries = config["sequencing_libraries"]
samples = {
    'single': {},
    'paired': {}
}
for library in libraries:

    libname = library["name"]
    sample_sheet = pd.read_csv(library["sample_sheet"])
    protocol = "pe" if "filename_2" in sample_sheet.columns else "se"

    if protocol == "pe":
        filelist = sample_sheet.filename_1.tolist()
        samples['paired'][libname] = [ re.sub(r'_1(?:_sequence)?', '', x) for x in filelist ]
    else:
        filelist = sample_sheet.filename.tolist()
        samples['single'][libname] = filelist

    if any([re.match('.*.f(?:ast)?q(?:.gz)?$', x) for x in filelist]):
        raise NameError("Filenames should not contain extensions. Remove .fastq.gz or .fq.gz from the filename column(s).")

pp(samples)

library_names_single = list(samples['single'].keys())
library_names_paired = list(samples['paired'].keys())

####################
## ONSTART BLOCK
####################

def mkdir(p: Path, verbose=False):
    if not p.exists():
        p.mkdir(parents=True, exist_ok=True)
        if verbose:
            print("Created {}".format(p))


onstart:
    for folder in init_folders:
        mkdir(folder)

############
## HELPERS
############


def get_bw(wildcards):
    """Builds bigwig paths for rule all"""
    o = []
    for lib in library_names_single + library_names_paired:
        if lib in samples["single"].keys():
            s = samples["single"][lib]
        else:
            s = samples["paired"][lib]
        o += expand(star_folder.joinpath("{serie}", "{sample}.bw"), serie = lib, sample = s)
    return o


def get_star_input(wildcards):
    """Builds input paths for STAR alignment testing if a library is single-end or paired-end"""
    if wildcards.serie in library_names_single:
        infile = trim_reads_folder.joinpath("{serie}", "{sample}.fastq.gz")
    else:
        infile = [ trim_reads_folder.joinpath("{serie}","{sample}_1.fastq.gz"),
                   trim_reads_folder.joinpath("{serie}","{sample}_2.fastq.gz") ]
    return infile


def get_params(wildcards, key):
    """Returns the value of a specific key for the current serie"""
    params = ""
    for lib in config["sequencing_libraries"]:
        if lib["name"] == wildcards.serie:
            params = lib[key]
    return params


def get_sample_sheet(wildcards):
    """Returns path to sample sheet for current serie"""
    return get_params(wildcards, "sample_sheet")


############
## RULES
############

wildcard_constraints:
    se_serie='|'.join(library_names_single),
    pe_serie='|'.join(library_names_paired),
    method="multihit|random",
    # se_sample="[^_12]"

# include: "../include/download_sra.rule"
include: "include/fastqc.rule"
include: "include/trim_single.rule"
include: "include/download_genome_fasta_file.rule"
if not disable_gtf_download:
    include: "include/download_genome_annotation_file.rule"
include: "include/star_genome_preparation.rule"
include: "include/star_single.rule"
include: "include/deseq2.rule"
include: "include/salmonTE_quant.rule"
include: "include/salmonTE_test.rule"
include: "include/edit_condition_file.rule"
include: "include/starTE_align_random.rule"
include: "include/starTE_align_multihit.rule"
include: "include/download_repeatmasker_annotation_file.rule"
include: "include/featureCounts_random.rule"
include: "include/featureCounts_multihit.rule"
include: "include/deseq2_report.rule"
include: "include/deseq2_subset_gtf.rule"
include: "include/filter_bam.rule"
include: "include/gtf2bed.rule"
include: "include/picard_markdup.rule"
include: "include/download_gaf_file.rule"
include: "include/make_bw.rule"
include: "include/coverage_tRNA.rule"


rule all:
    input:
        # MultiQC reports at different steps
        expand(multiqc_raw_folder.joinpath("{serie}","multiqc_report.html"),serie=library_names_single + library_names_paired),
        expand(multiqc_trim_folder.joinpath("{serie}","multiqc_report.html"), serie = library_names_single + library_names_paired),
        expand(multiqc_star_folder.joinpath("{serie}","multiqc_report.html"), serie = library_names_single + library_names_paired),
        expand(multiqc_markdup_folder.joinpath("{serie}","multiqc_report.html"), serie = library_names_single + library_names_paired),

        # DESeq2 flags
        expand(analysis_folder.joinpath("deseq2-{serie}.done"), serie = library_names_single + library_names_paired),

        # SalmonTE results folders
        expand(data_folder.joinpath("salmonTE/de_analysis/{se_serie}"), se_serie=library_names_single),
        expand(data_folder.joinpath("salmonTE/de_analysis/{pe_serie}"), pe_serie=library_names_paired),

        # FeatureCounts tables from STAR-TE
        expand(starTE_folder.joinpath("{se_serie}/featureCount/{method}.txt"), se_serie=library_names_single, method=["multihit", "random"]),
        expand(starTE_folder.joinpath("{pe_serie}/featureCount/{method}.txt"), pe_serie=library_names_paired, method=["multihit", "random"]),

        # Bigwig files
        get_bw,

        # tRNA coverage files
        expand(trna_coverage_folder.joinpath("{serie}", "tRNA_matrix.txt"), serie=library_names_paired + library_names_single)

